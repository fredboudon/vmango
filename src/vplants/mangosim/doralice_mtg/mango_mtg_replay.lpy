from openalea.plantgl.all import Text, Scaled, Sphere
from datetime import date, timedelta, datetime
from math import floor, ceil, log

from vplants.mangosim.state import *
from vplants.mangosim.util_date import *
import vplants.mangosim.doralice_mtg.mtg_manipulation  as mm
reload(mm)

mtg = mm.get_mtg()

treenames = mm.get_treenames_of_variety()
#['B10', 'B12', 'B14', 'F2', 'F6']
treeselection = TREE
treename = treenames[treeselection]

treeid = mm.get_tree_from_name(mtg,treename)
first_uc = mm.get_first_gu(mtg,treeid)

height_max = max([mtg.Height(gu) for gu in mm.get_terminal_gus_of_tree_at_cycle(mtg,treeid,3)])

first_date = cycle_end(3)-timedelta(days=1)
last_date  = cycle_end(5)

daystep = 7
total_weeks = week_difference(last_date,first_date)
nbsteps = ceil((last_date -first_date).days/float(daystep))

current_date = first_date
current_cycle = 3

def Start():
  global current_date
  global current_cycle
  current_date = first_date
  current_cycle = get_cycle(current_date)
  backward()

new_elements = True
def StartEach():
  global new_elements
  useGroup(1 if new_elements else 0)
  new_elements = False


def EndEach():
  global current_date
  global current_cycle
  current_date += timedelta(days = daystep)
  current_cycle = get_cycle(current_date)


export_fname = 'replay_mango.bmtg'
resultmtg = None

def End(lstring,lscene):
  from cPickle import dump,HIGHEST_PROTOCOL
  global resultmtg
  if EXPORT_TO_MTG:
    resultmtg = export_to_mtg(lstring, lscene)
    if SAVE_MTG:
      # write it in the file
      print 'Export result in',repr(export_fname)
      dump(resultmtg,open(export_fname,'wb'),HIGHEST_PROTOCOL)


def export_to_mtg(lstring, lscene):
  from openalea.mtg.io import axialtree2mtg
  parameters = {}
  scales = {}
  # Name of the modules to export
  modules_to_export = ['Tree', 'GU','Inflorescence']
  params_to_export = [['treename','method','estimation','loading','variety','within_delay_method','seed'],['burst_date','cycle'],['bloom_date','cycle']]
  scales = [1,2,2,2]
  # Convert lstring into mtg
  mtg = axialtree2mtg(lstring,
                      scale = dict(zip(modules_to_export,scales)),
                      scene = None,
                      parameters = dict(zip(modules_to_export,params_to_export)))
  return mtg

def estimate_radius(nbdescendants):
  return 0.02*pow(nbdescendants, 0.35)

# estimate nb of descendants for the pipe model
@mm.use_global_mtg
def estimate_nb_descendants(mtg, first_uc):
  from openalea.mtg.traversal import post_order2
  nbdescendants = {}
  for gu in post_order2(mtg, first_uc):
    if mm.get_unit_cycle(mtg,gu) == 3:
      nbdescendants[gu] = sum([nbdescendants[cgu] for cgu in mm.vegetative_children_at_cycle(mtg,gu,3)])+1
  return nbdescendants

nbdescendants = estimate_nb_descendants(first_uc)

initial_view = 1

module GU, Inflorescence, A, B

def generate_elements(current, burst_date = None, length=1, nbdescendants = 1):
    global new_elements
    new_elements = True
    param = ParameterSet(burst_date=burst_date,
                         nature=mm.get_nature_gu(mtg, current),
                         cycle =mm.get_unit_cycle(mtg, current), 
                         length=length, 
                         nbdescendants = nbdescendants,
                         radius = estimate_radius(nbdescendants), 
                         mtgid = current)
    nproduce /(60) GU( param )
    children = mm.vegetative_children(mtg, current)
    apical_child = [c for c in children if mm.is_apical(mtg, c)]
    lat_children = [c for c in children if mm.is_lateral(mtg,c)]
    inflo = mm.inflorescence_children(mtg, current)
    nb_inflorescences = len(inflo)
    nb_lat_children = len(lat_children)
    nb_lat_inflo = nb_inflorescences if len(apical_child) > 0 else max(0,nb_inflorescences-1)
    nb_lat_elements = nb_lat_children + nb_lat_inflo
    if nb_lat_children > 0:
      lat_angle = 360./nb_lat_elements
    def gu_parameters(gu):
       p = ParameterSet(mtgid=gu, 
                          position=mm.get_position_gu(mtg,gu), 
                          nature=mm.get_nature_gu(mtg,gu),
                          position_ancestor=mm.get_position_gu(mtg,mm.get_parent(mtg,gu)),
                          nature_ancestor=mm.get_nature_gu(mtg,mm.get_parent(mtg,gu)))
       if mm.has_burst_date(mtg,gu) : p.set(burst_date=mm.get_burst_date(mtg,gu)) 
       return p
    for ch in lat_children:
        nproduce /(lat_angle) [  &(60)
        if mm.get_unit_cycle(mtg, ch) == 3: 
           nproduce B( ch )
        else:  
           nproduce A( gu_parameters(ch) )
        nproduce ]
    if len(apical_child) > 0:
      if len(inflo) > 0:
        for i in xrange(1,len(inflo)):
          bloom_date = mm.get_bloom_dates(mtg,inflo[i])     
          if not bloom_date: bloom_date = cycle_begin(get_cycle(burst_date if burst_date else first_date)+1)
          else: bloom_date = bloom_date[0]
          nbfruits = mm.get_nb_fruits(mtg,inflo[i])
          nproduce /(lat_angle) [ &(60) Inflorescence(ParameterSet(mtgid=inflo[i],bloom_date=bloom_date,nb_fruits=nbfruits)) ]
      ch = apical_child[0]
      if mm.get_unit_cycle(mtg, ch) == 3:  nproduce B(ch)
      else: nproduce A( gu_parameters(ch) )
    elif len(inflo) > 0:
        bloom_date = mm.get_bloom_dates(mtg,inflo[0])        
        if not bloom_date: bloom_date = cycle_begin(get_cycle(burst_date if burst_date else first_date)+1)
        else: bloom_date = bloom_date[0]
        nbfruits = mm.get_nb_fruits(mtg,inflo[0])
        nproduce Inflorescence(ParameterSet(mtgid=inflo[0],bloom_date=bloom_date,nb_fruits=nbfruits))


module G
module LeafSets(lradius, age, scale)
module Flower(burst_date,order) # represent flower
module FlowerRepr(day_age,s)

Axiom: G B(first_uc)

derivation length: int(nbsteps)
ignore: / &

production:

decomposition:
maximum depth:height_max+1

B(current):
    length= 2 - log(mtg.Height(current)+1,height_max)
    generate_elements(current, None, length, nbdescendants[current])

production:

group 1: # pipe model
GU(p) >> x([ GU(pl) ]) GU(pa):
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+pa.nbdescendants+1
  p.radius = estimate_radius(p.nbdescendants)
  produce GU(p)

GU(p) >> x([ GU(pl) ]) :
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+1
  p.radius = estimate_radius(p.nbdescendants)
  produce GU(p)

group 0: # growth
A( p ):
  if  p.burst_date <= current_date :
    generate_elements(p.mtgid, p.burst_date)



Inflorescence(param):
  if param.nb_fruits > 0 and  (current_date - param.bloom_date).days >= 60:
    #print 'change inflo to fruit',param.mtgid, param.bloom_date, (current_date - param.bloom_date).days
    for i in xrange(param.nb_fruits):
      nproduce [Fruit(ParameterSet(inflo_bloom_date= param.bloom_date))]
    produce

interpretation:
maximum depth:5

# Setup  tropism and legend
# Note that the 2D legend cause a crash of lpy when recording the animation
G : 
  if TIMEBAR:
    ar = False
    envsize = 0.8
    nproduce [ @2D ,(5) @M(-0.85,-0.85) 
    nproduce Label('Tree : '+treename+'. Date: '+str(current_date.year)+'-'+str(current_date.month).zfill(2)+'-'+str(current_date.day).zfill(2)+'. Cycle: '+str(get_cycle(current_date)),14)
    clength = (current_date - first_date).days/float((last_date - first_date).days)
    nproduce ,(4) @M(-0.91,-0.9) -(90) _(0.04) F(0.01)
    if clength > 0:
      nproduce ,(2) @M(-0.9,-0.9) _(0.03) F(clength*envsize)
      nproduce ,(3) @M(-0.9+clength*envsize,-0.9) _(0.04) F(0.01)  
    if clength < 1:
      nproduce ,(4) @M(-0.9+envsize,-0.9) _(0.04) F(0.01)
      nproduce ,(5) @M(-0.9,-0.9) _(0.02) F(envsize)
    nproduce ]
  produce @Tp(0,0,1) @Ts(Elasticity)


#A(p) --> ,(3) f(0.1) @O(0.1)

GU(p):
  bdate = p.get('burst_date')
  is_base = (bdate is None)
  if not is_base:
    week_age = week_difference(current_date,bdate)
    produce ,(2) _(p.radius) LeafSets(p.radius, week_age, 1)
  else:
    produce ,(1) _(p.radius) nF(p.length, p.length/10.)

LeafSets(lradius, age, scale):
  ds = scale / 10.
  if LEAFY and age < 56 :
    phy = 137.5
    nproduce @Gc  F(ds) Leaf(0,lradius, leafsize(0.1), scale ) 
    nbleaf, dl = (ceil((scale-ds)*5),2*ds)
    for i in xrange(1,int(nbleaf)):
      nproduce nF(dl,ds) Leaf(phy*i,lradius, leafsize(0.1+0.1*i ), scale )
    nproduce F(ds) @Ge
    for i in xrange(1,4):
      nproduce Leaf(phy*i,lradius, leafsize(1),scale )
  else:
    produce  @Gc nF(1,0.1) @Ge

Leaf(angle, radius, length, scale ):
  produce [ /(angle) &(90)  f(radius) @Ge @Gc @v &(10) Sweep(leafpath,leafsection,length*scale,length*scale/10,scale,leafdiam)]

Inflorescence(p) :
  day_age = (current_date - p.bloom_date).days
  if day_age < 60:
    produce FlowerRepr(day_age, p.bloom_date.year + p.bloom_date.month + p.bloom_date.day)

FlowerRepr(day_age,s) :
  growth_duration = 21.
  flower_growth_duration = 21.
  scale = min(1,day_age/growth_duration)
  if LEAFY:
    import random as rd
    rdstate = rd.getstate()
    rd.seed(s)
    flower_radius = 0 if day_age < growth_duration else 0.04*min(1,(day_age-flower_growth_duration)/flower_growth_duration)
    nproduce [
    if day_age > growth_duration :  nproduce @Tp(0,0,-1) @Ts(inflo_elasticity(min(1,(day_age-growth_duration)/40.))) 
    nproduce ,(3) _(0.01) F(0.1)
    nbflower = 4
    nbelem = int(floor(10 * scale))
    for i in xrange(10-nbelem,10):
       nproduce    F(0.1) [ /(rd.randint(0,180))
       for j in xrange(nbflower):
           nproduce [ /(j*90)  &(rd.randint(70,110)) F(inflo_radius(i*0.1)) 
           if flower_radius > 0: nproduce ,(4) @O(flower_radius) 
           nproduce ]
       nproduce ]
    nproduce ,(3) F(0.1)
    if flower_radius > 0: nproduce ,(4) @O(0.04) 
    nproduce ]
    rd.setstate(rdstate)
  else:
    scale = 0.3
    produce ,(4) _(inflo_radius(0))F(scale,inflo_radius(1))

Fruit(p):
  nproduce F(0.3) ,(6) @g(Scaled(0.2, 0.2, 0.3, Sphere(1)))

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (71,91,46) , diffuse = 1.67033 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_7 = pgl.Material("Color_7" , ambient = (57,65,12) , diffuse = 1.66154 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	scalars = [('TREE', 'Integer', 4, 0, 4), ('Geometry', 'Category'), ('LEAFY', 'Bool', False), ('Elasticity', 'Float', 0.03, 0.0, 1.0, 2), ('TIMEBAR', 'Bool', True), ('EXPORT_TO_MTG', 'Bool', True), ('SAVE_MTG', 'Bool', True)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsize = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.431282, 1),(0.324129, 0.436757, 1),(0.408886, 0.416427, 1),(0.412274, 0.708684, 1),(0.844357, 0.703533, 1),(1, 0.246499, 1)]) , 
	    )
	leafsize.name = "leafsize"
	import openalea.plantgl.all as pgl
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.201299, 0.231602, 1),(-0.253247, 0.181818, 1),(-0.166667, 0, 1),(-0.0196652, -0.0165724, 1),(0.00408221, 0.0220172, 1),(0.0454545, -0.0151515, 1),(0.214286, -0.012987, 1),(0.383117, 0.164502, 1),(0.344156, 0.24026, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafpath = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.145022, -0.0735931, 1),(0.0844156, -0.212121, 1),(0.123377, -0.497835, 1)]) , 
	    )
	leafpath.name = "leafpath"
	inflo_elasticity = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0278664, 1),(0.341991, 0.034632, 1),(0.675325, 0.04329, 1),(1, 0.252183, 1)]) , 
	    )
	inflo_elasticity.name = "inflo_elasticity"
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.017316, 1),(0.167909, 0.309417, 1),(0.666667, 0.217373, 1),(1, 0, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	inflo_radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.160173, 1),(0.393939, 0.151515, 1),(0.735931, 0.0649351, 1),(1, 0.025974, 1)]) , 
	    )
	inflo_radius.name = "inflo_radius"
	radius_base03 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.131507, 1),(0.00454138, 0.0251277, 1),(0.578848, 0.00694723, 1),(1, 0.00524218, 1)]) , 
	    )
	radius_base03.name = "radius_base03"
	radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.107326, 1),(0.192635, 0.0975655, 1),(0.457142, 0.000244746, 1),(1, 0.026087, 1)]) , 
	    )
	radius.name = "radius"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 2'},[('Function',leafsize),('Curve2D',leafsection),('Curve2D',leafpath),('Function',inflo_elasticity),('Function',leafdiam),('Function',inflo_radius),('Function',radius_base03),('Function',radius)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafsize',leafsize),('inflo_elasticity',inflo_elasticity),('leafdiam',leafdiam),('inflo_radius',inflo_radius),('radius_base03',radius_base03),('radius',radius),]
	context["__curves__"] = [('leafsection',leafsection),('leafpath',leafpath),]
	context["__parameterset__"] = parameterset
	context["leafsize"] = pgl.QuantisedFunction(leafsize)
	context["leafsection"] = leafsection
	context["leafpath"] = leafpath
	context["inflo_elasticity"] = pgl.QuantisedFunction(inflo_elasticity)
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["inflo_radius"] = pgl.QuantisedFunction(inflo_radius)
	context["radius_base03"] = pgl.QuantisedFunction(radius_base03)
	context["radius"] = pgl.QuantisedFunction(radius)
