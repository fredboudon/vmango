from openalea.plantgl.all import * #Text
from datetime import *# date, timedelta, datetime
from math import *#floor, ceil, log, exp, degrees
from random import *
#from pandas import DataFrame, read_csv
import numpy as np
import numpy.random as nprand

from vplants.mangosim.tools import *
import vplants.mangosim.util_date as ud
from vplants.mangosim.util_date import *
from vplants.mangosim.state import *
import vplants.mangosim.util_lstring2mtg as lm ; reload(lm)
from vplants.mangosim.util_lstring2mtg import *
from vplants.mangosim.temperature import *
from vplants.mangosim.thermaltime import *

import vplants.mangosim.doralice_mtg.mtg_manipulation  as mm

import archibuilder; reload(archibuilder)
from archibuilder import MTGArchiBuilder, GLMArchiBuilder

seed(SEED)
nprand.seed(SEED)


mtg = mm.get_mtg()

treenames = mm.get_treenames_of_variety(mtg)
treeids = map(lambda tname : mm.get_tree_from_name(mtg,tname), treenames)
treenames = [tname for tname, treeid in zip(treenames,treeids) if mm.is_loaded(mtg, treeid)]
#['F2', 'B10', 'B12']
treeselection = TREE
treename = treenames[treeselection]

treeid = mm.get_tree_from_name(mtg,treename)
first_uc = mm.get_first_gu(mtg,treeid)
tree_load = mm.is_loaded(mtg, treeid)

height_max_3 = max([mtg.Height(gu) for gu in mm.get_terminal_gus_of_tree_at_cycle(mtg,treeid,3)])
height_max = max([mtg.Height(gu) for gu in mm.get_terminal_gus_of_tree_at_cycle(mtg,treeid,5)])

if daystep < 1:
  def todatetime(d,h=12,m=0,s=0): 
    if d is None: return None
    return datetime(d.year,d.month,d.day,h,m,s)
  ud.todatetime = todatetime

init_date  = cycle_end(3)+timedelta(days=1)
final_date = cycle_end(5)

first_date =  init_date
last_date  = todatetime(final_date)

glm_start_date   = first_date if WITH_GLM else last_date

total_weeks = week_difference(last_date,first_date)
nbsteps     = ceil((last_date -first_date).days/float(daystep))
delta_date  = timedelta(hours=24*daystep)
nb_of_days  = int(ceil((last_date -first_date).days))

previous_date = first_date
current_date  = first_date
current_cycle = get_cycle(current_date)

init_temperatures()

current_temperatures = [get_temperature(current_date)]

import organ_properties; reload(organ_properties)
from organ_properties import *


gumanager = GUManager()
gumanager.retrieve_parameters(globals())
gumanager.init_plot()

inflomanager = InfloManager()
inflomanager.retrieve_parameters(globals())
inflomanager.init_plot()

fruitmanager = FruitManager()
fruitmanager.retrieve_parameters(globals())
fruitmanager.init_plot()

archibuilder = GLMArchiBuilder(mtg, gumanager, inflomanager, False)

def Start():
  global previous_date, current_date, current_cycle, current_temperatures
  
  previous_date = first_date
  current_date  = first_date
  current_cycle = get_cycle(current_date)
  current_temperature = [get_temperature(first_date)]
  
  backward()



def StartEach():
  global new_elements
  useGroup(1)
  backward()
  
  global previous_date, current_date, current_cycle, current_temperatures
  
  previous_date = current_date
  current_date += delta_date
  
  archibuilder.starteach(current_date)
  
  if fruitmanager.is_fruiting_started(current_date):
     if previous_date < fruitmanager.get_fruiting_start_date() < current_date :
       current_date = fruitmanager.get_fruiting_start_date()
  
  current_cycle = get_cycle(current_date)
  
  if daystep > 1:
    current_temperatures = [get_temperature(cdate) for cdate in date_xrange(previous_date+timedelta(days=1),current_date+timedelta(days=1))]
  else:
    current_temperatures = [get_temperature(current_date)]
  
  if current_date == flowering_cycle_begin(current_cycle):
    fruitmanager.reset_fruiting()

export_fname = 'mango_structure.bmtg'
resultmtg = None

def EndEach(lstring, lscene):
  archibuilder.endeach(current_date)
  print 'Step',getIterationNb()
  
  global resultmtg
  #if EXPORT_TO_MTG:
  #  resultmtg = export_to_mtg(lstring, lscene)

  if fruitmanager.is_fruiting_started(current_date):
    fruitmanager.applymodel(lstring, lscene)
    #if fruitmanager.modelenabled and lscene:
    #    Viewer.showMessage('Fruit model evaluation : '+str(current_date), 1000)


def End(lstring, lscene):
  global resultmtg
  if EXPORT_TO_MTG:
    resultmtg = export_to_mtg(lstring, lscene)
    if SAVE_MTG:
      # write it in the file
      print 'Export result in',repr(export_fname)
      dump_obj(resultmtg, export_fname)



module Tree(p) : scale = 1
module GU(p), Inflorescence(p): scale = 2
module Fruit(p)
module A(p), GUEnd, Internode, Leaf, InflorescenceBud : scale = 3
module Information : scale = 1 
module Pedicel, Flower
module Petiole, fLeaf, gLeaf

if not 'TextureBaseColor' in globals():
  TEXTURE = False
  execContext().declare('TextureBaseColor')
  execContext().declare('InterpolateTextureBaseColors')

###### Generation and initialization of elements #########

initial_view = 1

Axiom: 
  nproduce Information 
  nproduce @Tp(0,0,1) @Ts(ELASTICITY) @Gc
  nproduce Tree(ParameterSet(treename=treename, variety='cogshall', date=current_date,seed=SEED, mtgid=treeid,loading=eLoaded))
  
  archibuilder.init(first_uc, current_date)
  
  #trunkparam = generate_parameters_GU(first_uc,nbdescendants[first_uc])
  #generate_elements(trunkparam)

  #infloparam = inflomanager.set_dimensions(ParameterSet(burst_date=first_date, nb_fruits=1, fruiting = False), current_date)
  #nproduce +(60) Inflorescence_bud(infloparam)
  
  #guparam = gumanager.set_dimensions(ParameterSet(burst_date=date(2003,6,1), position=eApical, position_parent=eApical, nbdescendants=1, simplified=True, leafy=True), current_date)
  #nproduce [+(90) GU(guparam)]

derivation length: int(nbsteps)
ignore: / &

production:

decomposition:
maximum depth: max(height_max - +1,height_max_3+1)

A( p ):
  if  p.burst_date <= current_date :
    if glm_start_date <= current_date :
       archibuilder.generate_from_glm(p, current_date)
    else:
       archibuilder.generate_from_mtg(p, current_date)


InflorescenceBud(p):
  if  p.burst_date <= current_date :
     inflomanager.init_growth(p, current_date)
     fruitmanager.init_fruiting_start_date(p.burst_date)
     produce Inflorescence(p)
     

production:

group 1: # pipemodel

consider: GU

GU(p) >> x([ GU(pl) ]) GU(pa):
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+pa.nbdescendants+1
  p.radius = gumanager.estimate_radius(p.nbdescendants)
  gumanager.gu_growth(p, daystep, current_temperatures)
  nproduce GU(p)


GU(p) >> x([ GU(pl) ]) :
  n1 = p.nbdescendants
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+1
  p.radius = gumanager.estimate_radius(p.nbdescendants)
  gumanager.gu_growth(p, daystep, current_temperatures)
  nproduce GU(p)

group 0:

GU(p) :
  gumanager.gu_growth(p, daystep, current_temperatures)


Inflorescence(p):
  # p=p.copy()
  inflomanager.step_growth(p, daystep, current_temperatures)
  nproduce Inflorescence(p)
  if p.fruiting == False and fruitmanager.modelenabled:
    if hasattr(p,'fruit_appearance_date') and current_date >= p.fruiting_date:
      p.fruiting = True
      for i in xrange(p.nb_fruits):
        nproduce [+((-1**i)*(120/p.nb_fruits)*i) Fruit(ParameterSet(growth=p.fruit_growth, 
        maturity_date=p.fruit_maturity_date,
        appearance_date=p.fruit_appearance_date,
        weight_min=p.fruit_weight_min))]

group 0:

interpretation:
maximum depth:10

# Setup  tropism and legend
# Note that the 2D legend cause a crash of lpy when recording the animation
Information : 
  if TIMEBAR:
    ar = False
    envsize = 0.8
    nproduce [ @2D @R @Ts(0),(5) @M(-0.90,-0.85) 
    nproduce Label('Tree: '+treename+'. Date: '+str(current_date.year)+'-'+str(current_date.month).zfill(2)+'-'+str(current_date.day).zfill(2)+'. Cycle: '+str(get_cycle(current_date))+'. T: '+str(current_temperatures[-1])+' C',14)
    clength = (current_date - first_date).days/float((last_date - first_date).days)
    nproduce ,(4) @M(-0.91,-0.9) -(90) _(0.04) F(0.01)
    if clength > 0:
      nproduce ,(2) @M(-0.9,-0.9) _(0.03) F(clength*envsize)
      nproduce ,(3) @M(-0.9+clength*envsize,-0.9) _(0.04) F(0.01)  
    if clength < 1:
      nproduce ,(4) @M(-0.9+envsize,-0.9) _(0.04) F(0.01)
      nproduce ,(5) @M(-0.9,-0.9) _(0.02) F(envsize)
    nproduce ]
  if BACKGROUND:
    scale = 200
    nproduce [ ,(30) @M(-1.5*scale,0,0) _(scale) TextureScale(1./(2*scale)) TextureTranslation(0.5,0) @b(1.5*scale)  ]
    nproduce [ ,(31) @M(-1.5*scale,0,0) ^(90) _(scale) TextureScale(1./(2*scale)) TextureTranslation(0.5,0) @b(scale)  ]


Inflorescence(param): 
   inflomanager.plot(param, current_date)
   pass

GU(p):
  gumanager.plot(p, TEXTURE, LEAFY)
  pass

ignore: +
Inflorescence(param) < Fruit(p):
  fruitmanager.plot(param, p, current_date)

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (71,91,46) , diffuse = 1.67033 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_7 = pgl.Material("Color_7" , ambient = (62,125,20) , diffuse = 2.04 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (78,102,23) , diffuse = 1.50437 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_9 = pgl.Material("Color_9" , ambient = (70,113,21) , diffuse = 1.77218 , )
	Color_9.name = "Color_9"
	context.turtle.setMaterial(9,Color_9)
	Color_10 = pgl.Material("Color_10" , ambient = (59,49,16) , diffuse = 1.77966 , specular = (0,0,0) , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (137,52,37) , diffuse = 1.64964 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (60,60,15) , diffuse = 3 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (30,60,10) , diffuse = 1.68333 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_14 = pgl.Material("Color_14" , ambient = (55,60,14) , diffuse = 3 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	Color_15 = pgl.Material("Color_15" , ambient = (159,235,97) , diffuse = 0.680851 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
	Color_16 = pgl.Material("Color_16" , ambient = (255,82,108) , diffuse = 0.627451 , )
	Color_16.name = "Color_16"
	context.turtle.setMaterial(16,Color_16)
	Color_17 = pgl.Material("Color_17" , ambient = (255,255,0) , diffuse = 1 , specular = (99,99,99) , )
	Color_17.name = "Color_17"
	context.turtle.setMaterial(17,Color_17)
	Color_18 = pgl.Material("Color_18" , ambient = (255,170,0) , diffuse = 0.705882 , )
	Color_18.name = "Color_18"
	context.turtle.setMaterial(18,Color_18)
	Color_20 = pgl.Material("Color_20" , ambient = (0,0,0) , diffuse = 14.5455 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_21 = pgl.Material("Color_21" , ambient = (51,50,16) , diffuse = 1.78431 , )
	Color_21.name = "Color_21"
	context.turtle.setMaterial(21,Color_21)
	Color_22 = pgl.Material("Color_22" , ambient = (207,193,17) , diffuse = 0.990526 , specular = (81,81,81) , )
	Color_22.name = "Color_22"
	context.turtle.setMaterial(22,Color_22)
	Color_23 = pgl.Material("Color_23" , ambient = (101,94,11) , diffuse = 1.65347 , specular = (0,0,0) , )
	Color_23.name = "Color_23"
	context.turtle.setMaterial(23,Color_23)
	PGL_140318980955920 = pgl.ImageTexture("PGL_140318980955920" , "/Users/fboudon/Develop/vplants/branches/mangosim/share/textures/leaf.png" , )
	PGL_140318980955920.name = "PGL_140318980955920"
	Color_30 = pgl.Texture2D(image = PGL_140318980955920 , )
	Color_30.name = "Color_30"
	context.turtle.setMaterial(30,Color_30)
	PGL_140675898004864 = pgl.ImageTexture("PGL_140675898004864" , "/Users/fboudon/Develop/vplants/branches/mangosim/share/textures/leaf-bw.png" , )
	PGL_140675898004864.name = "PGL_140675898004864"
	Color_31 = pgl.Texture2D(image = PGL_140675898004864 , )
	Color_31.name = "Color_31"
	context.turtle.setMaterial(31,Color_31)
	PGL_140608034579296 = pgl.ImageTexture("PGL_140608034579296" , "/Users/fboudon/Develop/vplants/branches/mangosim/share/textures/bark2.png" , )
	PGL_140608034579296.name = "PGL_140608034579296"
	Color_32 = pgl.Texture2D(image = PGL_140608034579296 , )
	Color_32.name = "Color_32"
	context.turtle.setMaterial(32,Color_32)
	Color_40 = pgl.Material("Color_40" , ambient = (91,4,35) , diffuse = 1.67033 , )
	Color_40.name = "Color_40"
	context.turtle.setMaterial(40,Color_40)
	context.animation_timestep = 0.1
	context.options.setSelection('Module declaration',1)
	context.options.setSelection('Warning with sharp module',0)
	scalars = [('Geometry', 'Category'), ('LEAFY', 'Bool', True), ('WITH_INFLO', 'Bool', True), ('RESOLUTION', 'Integer', 0, 0, 2), ('TEXTURE', 'Bool', True), ('ELASTICITY', 'Float', 0.02, 0.0, 1.0, 2), ('Data Export', 'Category'), ('EXPORT_TO_MTG', 'Bool', True), ('SAVE_MTG', 'Bool', False), ('FRUITMODEL_OUTPUT', 'Bool', False), ('Simulation', 'Category'), ('TREE', 'Integer', 1, 0, 2), ('SEED', 'Integer', 0, 0, 100), ('daystep', 'Integer', 29, 1, 100), ('temperature_variability', 'Bool', False), ('WITH_GLM', 'Bool', True), ('FRUIT_MODEL', 'Bool', True), ('FRUITBRANCHSIZE', 'Integer', 4, 1, 10), ('Environment', 'Category'), ('TIMEBAR', 'Bool', True), ('BACKGROUND', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsize = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.431282, 1),(0.324129, 0.436757, 1),(0.408886, 0.416427, 1),(0.412274, 0.708684, 1),(0.844357, 0.703533, 1),(1, 0.246499, 1)]) , 
	    )
	leafsize.name = "leafsize"
	import openalea.plantgl.all as pgl
	axis1 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.214286, 0.00865801, 1),(0.45671, 0.138528, 1)]) , 
	    )
	axis1.name = "axis1"
	axis2 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.209957, -0.017316, 1),(0.491342, -0.0952381, 1)]) , 
	    )
	axis2.name = "axis2"
	axis3 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, 0, 1),(0.5, 0, 1)]) , 
	    )
	axis3.name = "axis3"
	axis4 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.158009, -0.047619, 1),(0.166667, 0.004329, 1),(0.443723, -0.393939, 1)]) , 
	    )
	axis4.name = "axis4"
	axis5 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	axis5.name = "axis5"
	leaflength = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 1, 1),(0.00149779, 1.00072, 1),(1, 0.995671, 1),(1, 0.400121, 1)]) , 
	    )
	leaflength.name = "leaflength"
	petioleCurve = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.543785, 0.192006, 1),(-0.178289, 0.176044, 1),(-0.0656355, 0.0728558, 1),(0.548469, 0.597983, 1),(0.397151, 0.581459, 1),(0.543571, 0.599108, 1)]) , 
	    )
	petioleCurve.name = "petioleCurve"
	leafwidth = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0123039, 1),(0.289062, 0.0763736, 1),(0.289062, 0.454469, 1),(0.331839, 0.989763, 1),(1, 1, 1)]) , 
	    )
	leafwidth.name = "leafwidth"
	leafpath = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.145022, -0.0735931, 1),(0.0844156, -0.212121, 1),(0.123377, -0.497835, 1)]) , 
	    )
	leafpath.name = "leafpath"
	inflo_elasticity = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0278664, 1),(0.341991, 0.034632, 1),(0.675325, 0.04329, 1),(1, 0.252183, 1)]) , 
	    )
	inflo_elasticity.name = "inflo_elasticity"
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.508209, 0.16873, 1),(-0.515031, 0.138195, 1),(-0.198373, -0.0924227, 1),(-0.00298323, 0.188761, 1),(0.0897461, -0.106293, 1),(0.555704, 0.0979703, 1),(0.545047, 0.12817, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0846264, 1),(0.239002, 1.00091, 1),(0.485529, 0.991241, 1),(0.718616, 1.00718, 1),(0.877539, 0.231273, 1),(1, 0.00332359, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	inflo_radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.160173, 1),(0.393939, 0.151515, 1),(0.735931, 0.0649351, 1),(1, 0.025974, 1)]) , 
	    )
	inflo_radius.name = "inflo_radius"
	radius_base03 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.131507, 1),(0.00454138, 0.0251277, 1),(0.578848, 0.00694723, 1),(1, 0.00524218, 1)]) , 
	    )
	radius_base03.name = "radius_base03"
	radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.107326, 1),(0.192635, 0.0975655, 1),(0.457142, 0.000244746, 1),(1, 0.026087, 1)]) , 
	    )
	radius.name = "radius"
	fruitprofile = pgl.BezierCurve2D(	
	    pgl.Point3Array([(0.00563514, 0.994106, 1),(0.223956, 0.97883, 1),(0.425561, 0.771672, 1),(0.680945, 0.239898, 1),(0.509633, 0.00914747, 1),(0.0130125, 0.0011832, 1)]) , 
	    )
	fruitprofile.name = "fruitprofile"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 2'},[('Function',leafsize),('Curve2D',axis1),('Curve2D',axis2),('Curve2D',axis3),('Curve2D',axis4),('Curve2D',axis5),('Function',leaflength),('Curve2D',petioleCurve),('Function',leafwidth),('Curve2D',leafpath),('Function',inflo_elasticity),('Curve2D',leafsection),('Function',leafdiam),('Function',inflo_radius),('Function',radius_base03),('Function',radius),('Curve2D',fruitprofile)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafsize',leafsize),('leaflength',leaflength),('leafwidth',leafwidth),('inflo_elasticity',inflo_elasticity),('leafdiam',leafdiam),('inflo_radius',inflo_radius),('radius_base03',radius_base03),('radius',radius),]
	context["__curves__"] = [('axis1',axis1),('axis2',axis2),('axis3',axis3),('axis4',axis4),('axis5',axis5),('petioleCurve',petioleCurve),('leafpath',leafpath),('leafsection',leafsection),('fruitprofile',fruitprofile),]
	context["__parameterset__"] = parameterset
	context["leafsize"] = pgl.QuantisedFunction(leafsize)
	context["axis1"] = axis1
	context["axis2"] = axis2
	context["axis3"] = axis3
	context["axis4"] = axis4
	context["axis5"] = axis5
	context["leaflength"] = pgl.QuantisedFunction(leaflength)
	context["petioleCurve"] = petioleCurve
	context["leafwidth"] = pgl.QuantisedFunction(leafwidth)
	context["leafpath"] = leafpath
	context["inflo_elasticity"] = pgl.QuantisedFunction(inflo_elasticity)
	context["leafsection"] = leafsection
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["inflo_radius"] = pgl.QuantisedFunction(inflo_radius)
	context["radius_base03"] = pgl.QuantisedFunction(radius_base03)
	context["radius"] = pgl.QuantisedFunction(radius)
	context["fruitprofile"] = fruitprofile
