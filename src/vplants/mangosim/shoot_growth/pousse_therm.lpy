from datetime import *
from openalea.plantgl.all import *
from math import *
from random import *


pdt=1/24. # une heure
current_date = datetime(2003,7,1)
delta_date = timedelta(hours=24*pdt)

B=1
t_ip=5
totlength = []

def Start():
  global current_date
  current_date = datetime(2003,7,1)
  global totlength
  totlength = [(0,0)]

def StartEach():
  global current_date
  current_date += delta_date
  
def GrowthCurve(T,A):
  y=A/(1+exp(-(T-t_ip)/B))
  return(y)

def plotCurve(data, xextend = None, yextend = None, pos = (0.1,-0.8), dim = (0.8,0.8), xtick = None, ytick = None ):
  if len(data) > 1:
    print data
    if xextend:
      minx, maxx = xextend
    else :
      minx = floor(min([x for x,y in data]))
      maxx = ceil(max([x for x,y in data]))
    if yextend:
      miny, maxy = yextend
    else :
      miny = floor(min([y for x,y in data]))
      maxy = ceil(max([y for x,y in data]))
    xext = maxx - minx
    yext = maxy - miny
    x2Dlength, y2Dlength = dim
    projx = lambda x: (x2Dlength*(x-minx)/xext)
    projy = lambda y: (y2Dlength*(y-miny)/yext)
    if xtick is None:
      xtick = yext*0.1
    if ytick is None:
      ytick = xext*0.1
    
    data = [(projx(x),projy(y)) for x,y in data]
    ticklength = 0.02
    
    nproduce [ @2D ,(3) @M(pos[0],pos[1]) @R @g(Polyline2D(data,width=2))
    if miny <= 0 <= maxy:
      nproduce ,(5) @g(Polyline2D([(projx(minx),projy(0)),(projx(maxx),projy(0))]))
      cxtick = minx + xtick
      while cxtick < maxx:
        nproduce ,(5) @g(Polyline2D([(projx(cxtick),projy(-ticklength)),(projx(cxtick),projy(ticklength))]))
        cxtick += xtick
    if minx <= 0 <= maxx:
      nproduce ,(2) @g(Polyline2D([(projx(0),projy(miny)),(projx(0),projy(maxy))]))
      cytick = miny + ytick
      while cytick < maxy:
        nproduce ,(2) @g(Polyline2D([(projx(-ticklength),projy(cytick)),(projx(ticklength),projy(cytick))]))
        cytick += ytick
    nproduce ]

NbInternode = 10
phyllotaxy = 137.5

module Bud(burstdate) 
module UC(burstdate, phenostage, phenoage) 
module Internode(size), Leaf(position, size)
module Env

Axiom: Env Bud(current_date+timedelta(days=2))

derivation length: ceil(20/pdt)
production:

Bud(burst):
  if (burst == current_date) :
    Fsize=min(max(0.5,gauss(16.67,20.8381)),25)
    FsizeL=max(0.5,gauss(47.16/2.,19.33/2.))
    NbInternode=int(max(ceil(0.6*Fsize)+randint(-1,1),1))
    nproduce C(0,Fsize)
    for i in xrange(NbInternode):
      nproduce Internode(0.01,0,Fsize/NbInternode) /(phyllotaxy) [ Leaf(i/float(NbInternode),0.1,0,FsizeL/10.) ]
    nb_chil= randint(4,6)              
    if nb_chil>1:
          angle=360./(nb_chil-1) +randint(-20,20)
          for i in xrange(0,nb_chil-1):
            nproduce /(angle) [&(60) Bud(current_date+timedelta(days=30)) /(i*137.5) ]
          produce Bud(current_date+timedelta(days=30))

Internode(size,age,Fsize):
  age += pdt
  if age >= 10.0: age = 10.0
  l = GrowthCurve(age,Fsize)
  produce Internode( l,age,Fsize)

Leaf(position, size,age,Fsize):
  age += pdt
  produce Leaf(position, GrowthCurve(age,Fsize)*3,age,Fsize)

C(age,Fsize):
  age += pdt
  if age >= 10.0: age = 10.0
  l = GrowthCurve(age,Fsize)
  totlength.append((age,l))
  produce C(age,Fsize)
  


interpretation:
C(age,Fsize):
  plotCurve(totlength)

Internode(size,age,Fsize) --> produce F(size) 

Leaf(pos, size,age,Fsize) --> ,(2) [ /(137.5) &(90-max(0,89-age*5))f(0.0),(2)   @Gc _(leafdiam(0)) Sweep(leafpath,leafsection, size, size/10., size, leafdiam) ]

Bud(burstdate) --> ,(3) @O(0.11)

Env --> Label(str(current_date)) #@g(ScreenProjected(Translated(-0.5,-0.7,0,Text(str(current_date)))))

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.animation_timestep = 0.028
	import openalea.plantgl.all as pgl
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0359806, 1),(0.146454, 0.203327, 1),(0.34022, 0.310394, 1),(1, 0.0239871, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	import openalea.plantgl.all as pgl
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.432297, 0.393438, 1),(-0.496109, 0.253958, 1),(-0.198373, -0.0924227, 1),(-0.00298323, 0.188761, 1),(0.0897461, -0.106293, 1),(0.497908, 0.285806, 1),(0.424119, 0.385331, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafpath = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	leafpath.name = "leafpath"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',leafdiam),('Curve2D',leafsection),('Curve2D',leafpath)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafdiam',leafdiam),]
	context["__curves__"] = [('leafsection',leafsection),('leafpath',leafpath),]
	context["__parameterset__"] = parameterset
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["leafsection"] = leafsection
	context["leafpath"] = leafpath
