from openalea.plantgl.all import * #Text
from datetime import *# date, timedelta, datetime
from math import *#floor, ceil, log, exp, degrees
from random import *
from pandas import DataFrame, read_csv
import numpy as np

from vplants.mangosim.tools import *
from vplants.mangosim.state import *
from vplants.mangosim.util_date import *
#import vplants.mangosim.util_thermaltime as tt; reload(tt)
from vplants.mangosim.util_thermaltime import *
import vplants.mangosim.util_lstring2mtg as lm ; reload(lm)
from vplants.mangosim.util_lstring2mtg import *
import vplants.mangosim.doralice_mtg.mtg_manipulation  as mm
reload(mm)

seed(SEED)

#from vplants.mangosim.tools import load_obj
#mtg = load_obj("simulated_mango_glm.bmtg",'../glm_simulation')
#mm.setMtgStyle(mm.eSimulatedMtg)

mtg = mm.get_mtg()

treenames = mm.get_treenames_of_variety(mtg)
#['B10', 'B12', 'B14', 'F2', 'F6']
treeselection = TREE
treename = treenames[treeselection]

treeid = mm.get_tree_from_name(mtg,treename)
first_uc = mm.get_first_gu(mtg,treeid)

height_max_3 = max([mtg.Height(gu) for gu in mm.get_terminal_gus_of_tree_at_cycle(mtg,treeid,3)])
height_max = max([mtg.Height(gu) for gu in mm.get_terminal_gus_of_tree_at_cycle(mtg,treeid,5)])

first_date = cycle_end(3)-timedelta(days=1)
last_date  = cycle_end(5)

total_weeks = week_difference(last_date,first_date)
nbsteps     = ceil((last_date -first_date).days/float(daystep))
delta_date  = timedelta(hours=24*daystep)
nb_of_days  = int(ceil((last_date -first_date).days))

current_date  = first_date
current_cycle = get_cycle(current_date)


if FULL_RESOLUTION:
  LeafWidthRes  = 10
  LeafLengthRes = 20
  InternodeRes  = 1
  PetioleRes    = 15
else:
  LeafWidthRes  = 5
  LeafLengthRes = 5
  InternodeRes  = 1
  PetioleRes    = 3  

leafsection.stride = LeafWidthRes

def get_temperature(day):
  return 25

current_temperature = get_temperature(first_date)

# Initializing variables
t_ip_GU_mean = 79.40
t_ip_GU_sd   = 10.75
t_ip_Leaf    = 182.04/2.                           # Inflexion point of leaf growth curve
t_ip_Inflo   = 346.03/2.                          # Inflexion point of inflorescence growth curve

base_temperature_GU    = 9.2                # Base temperature of GUs
base_temperature_Leaf  = 10.73              # Base temperature of Leafs
base_temperature_Inflo = 11.12              # Base temperature of inflorescences

phyllotaxy = 144  # +randint(-2,2)          # mango phyllotaxie
final_diamI = 0.2                           # diameter of GUs (at the end of growth)

# Phenological stages definition
pheno_base_temp_GU   = [13.37766,13.37766,13.37766,9.784431,0]    # stages DEF_G_H
pheno_stade_temp_GU  = [38.50,47.61,47.39,316.376,999]       # temperatures of GU's stage change
pheno_change_temp_GU = np.cumsum(pheno_stade_temp_GU)
pheno_color = [7,10,11,14,13,13]                         # color for each stage (GU)
pheno_angle = [0,90,165,60,60,60]                        # angle between leaf and internode for each stage
Nb_stades_pheno = len(pheno_change_temp_GU)              # number of phenological stages

pheno_base_temp_Inflo   =  [11.10,5.38,8.67,15.11,0]                # base temperature for each phenological stage of inflorescence
pheno_stade_temp_Inflo  = [70.56,172.35,133.32,230.42,999]
pheno_change_temp_Inflo = np.cumsum (pheno_stade_temp_Inflo)     # temperatures of inflorescence stage change
pheno_color_inflo =  [15,16,16,16,16,16]                  # color for each stage (inflorescence)
pheno_color_flower = [13,2,7,12,4,4]

pheno_stadename_GU =    {0: 'ABCD', 1 : 'E', 2 : 'F', 3 : 'G', 4: 'H' }
pheno_stadename_Inflo = {0: 'ABCD', 1 : 'E', 2 : 'F', 3 : 'G' }


# Gaussian distribution parameters
# GUs length (position: apical with apical mother, apical with lateral mother, lateral)
GU_length_apic_apic_mean = 18.14
GU_length_apic_apic_sd   = 4.14

GU_length_apic_lat_mean  = 13.79
GU_length_apic_lat_sd    = 4.03

GU_length_lat_mean       = 12.59
GU_length_lat_sd         = 3.38

# Leafs length (positions: apical, lateral)
Leaf_length_apic_mean    = 17.06 
Leaf_length_apic_sd      = 2.7

Leaf_length_lat_mean     = 14.87
Leaf_length_lat_sd       = 2.7

# Inflorescences length
Inflo_length_mean        = 23.15833
Inflo_length_sd          = 6.767254

def Start():
  global current_date, current_cycle, current_temperature
  
  current_date = first_date
  current_cycle = get_cycle(current_date)
  current_temperature = get_temperature(first_date)
  
  backward()


new_elements = True
inflo_flush_start = None

def StartEach():
  global new_elements
  
  useGroup(1 if new_elements else 0)
  backward()
  
  new_elements = False
  
  global current_date, current_cycle, current_temperature
  
  current_date += delta_date  
  current_cycle = get_cycle(current_date)  
  current_temperature = get_temperature(current_date)
  
  global inflo_flush_start
  if current_date == flowering_cycle_begin(current_cycle):
    inflo_flush_start = None


export_fname = 'simulated_mango.bmtg'
resultmtg = None

def EndEach(lstring, lscene):
  global resultmtg
  if EXPORT_TO_MTG:
    resultmtg = export_to_mtg(lstring, lscene)

  global inflo_flush_start
  if inflo_flush_start and current_date == inflo_flush_start + timedelta(days=50):
    import vplants.mangosim.fruitmodel.fruitmodel as fm ; reload(fm)
    from vplants.mangosim.fruitmodel.fruitmodel import applymodel
    # Fruit model evaluation
    lmtg = export_to_mtg_light(lstring, None) # , lscene)
    dump_obj(lmtg, 'fruitstructure.pkl')
    applymodel(lmtg, get_flowering_cycle(inflo_flush_start))
    inflo_flush_start = None


def End(lstring, lscene):
  global resultmtg
  if EXPORT_TO_MTG:
    resultmtg = export_to_mtg(lstring, lscene)
    if SAVE_MTG:
      # write it in the file
      print 'Export result in',repr(export_fname)
      dump_obj(resultmtg, export_fname)



import leafgeometry; reload(leafgeometry)
from leafgeometry import retrieveCurves, ProfileInterpolation

curves = retrieveCurves(globals())
axisfunc = ProfileInterpolation(curves,[0,0.1,0.5,0.6,0.7,0.8])


def to_be_developped(gu, date = current_date, mtg = mtg):
    bdate = mm.get_burst_date(mtg,gu)
    return (bdate is None or bdate < date)

def estimate_radius(nbdescendants):
  return 0.3*pow(nbdescendants, 0.45)

# estimate nb of descendants for the pipe model
@mm.use_global_mtg
def estimate_nb_descendants(mtg, first_uc):
  from openalea.mtg.traversal import post_order2
  nbdescendants = {}
  
  for gu in post_order2(mtg, first_uc):
    if to_be_developped(gu, first_date):
      nbdescendants[gu] = sum([nbdescendants[cgu] for cgu in mm.vegetative_children(mtg,gu) if to_be_developped(cgu, first_date)])+1
  return nbdescendants

nbdescendants = estimate_nb_descendants(mtg,first_uc)


module Tree(p) : scale = 1
module GU(p), Inflorescence(p): scale = 2
module A(p), GUEnd, Internode, Leaf, Inflorescence_bud : scale = 3
module Information : scale = 1 
module Flower, Petiole, fLeaf 

###### Generation and initialization of elements #########

def get_length(mean, sd, minval, maxval):
  val = gauss(mean, sd)
  while (val < minval) or (val > maxval):
    val = gauss(mean, sd)
  return val


#def generate_parameters_GU(current, length, burst_date, nbdescendants):
def generate_parameters_GU(gu, nbdescendants = 1):
   parent = mm.get_parent(mtg,gu)
   p = ParameterSet(mtgid            = gu, 
                    nature           = mm.get_nature_gu(mtg,gu),
                    nature_parent    = mm.get_nature_gu(mtg,parent),
                    position         = mm.get_position_gu(mtg,gu), 
                    position_parent  = mm.get_position_gu(mtg,parent),
                    nbdescendants    = nbdescendants)
   #if mm.has_burst_date(mtg,gu) : 
   p.set(burst_date = mm.get_burst_date(mtg,gu)) 
   return p


def set_dimension_parameters_GU(params):
  # We define parameters for simulation
  
  position = params.position
  position_parent = params.position_parent
  
  gu_size_distrib = { (eApical, eApical)   : (GU_length_apic_apic_mean , GU_length_apic_apic_sd),
                      (eApical, eLateral)  : (GU_length_apic_lat_mean  , GU_length_apic_lat_sd),
                      (eLateral, eApical)  : (GU_length_lat_mean  , GU_length_lat_sd),
                      (eLateral, eLateral) : (GU_length_lat_mean  , GU_length_lat_sd) }
  
  mean, sd = gu_size_distrib[(position,position_parent)]
  final_size_GU = get_length(mean, sd, 5, 25)
  
  
  leaf_size_distrib = { eApical  : (Leaf_length_apic_mean , Leaf_length_apic_sd),
                        eLateral : (Leaf_length_lat_mean  , Leaf_length_lat_sd) }
  
  mean, sd = leaf_size_distrib[position]
  final_size_Leaf = get_length(mean, sd, 5, 34)
  
  if position == eApical:
    LEPF = gauss(2.63,1.72)  #length of space before the first leaf
    
  else: # Lateral case
    #length of space before the first leaf depend of GU's length
    LEPF = final_size_GU*0.38 + 0.88 + randint(-1,1)  
  
  # Number of leafs depend of GU's length
  nb_internodes = int(max(ceil(0.6 * final_size_GU) + randint(-1,1) ,1))
  t_ip=gauss(t_ip_GU_mean,t_ip_GU_sd)
  
  params = params.copy()
  params.set( radius = estimate_radius(params.nbdescendants), 
             
             final_size_GU    = final_size_GU,
             final_size_Leaf  = final_size_Leaf,
             LEPF             = LEPF,
             nb_internodes    = nb_internodes,
             diam             = 0,
             
             t_ip             = t_ip)
  
  if params.burst_date:
      delta_base_temp  = gauss(0,3) if temperature_variability else 0
      gu_growth_tts    = ThermalTimeAccumulator(base_temperature_GU - delta_base_temp)
      leaf_growth_tts  = ThermalTimeAccumulator(base_temperature_Leaf - delta_base_temp)
      pheno_base_temp  = pheno_base_temp_GU if not temperature_variability else [t - delta_base_temp  for t in pheno_base_temp_GU]
      gu_pheno_tts     = MultiPhaseThermalTimeAccumulator(pheno_base_temp, pheno_change_temp_GU)
      
      for day in date_xrange(params.burst_date, current_date+timedelta(days=1)):
        daytemp = get_temperature(day)
        for tts in [gu_growth_tts, leaf_growth_tts, gu_pheno_tts]:
            tts.accumulate(daytemp)  
            
      params.set(gu_growth_tts    = gu_growth_tts,
                 leaf_growth_tts  = leaf_growth_tts,
                 gu_pheno_tts     = gu_pheno_tts)
  return params

def generate_parameters_Inflo(inflo,guparam):
    
    final_size_inflo = get_length(Inflo_length_mean, Inflo_length_sd, 5, 44)
    nbfruits = mm.get_nb_fruits(mtg,inflo)
    
    bloom_date = mm.get_bloom_dates(mtg,inflo)        
    if not bloom_date: 
      gu_cycle = get_cycle(guparam.burst_date if guparam.burst_date else first_date)
      bloom_date = date(2000+gu_cycle, 8, randint(1,31)) # We bloom the inflo in august
    elif type(bloom_date) is list: 
      bloom_date = bloom_date[0]
    
    growth_tts   = ThermalTimeAccumulator(base_temperature_Inflo)
    pheno_tts    = MultiPhaseThermalTimeAccumulator(pheno_base_temp_Inflo, pheno_change_temp_Inflo)
    
    # burst date should be computed from bloom date and pheno_tts reverse timing
    
    return ParameterSet( mtgid=inflo,
                         
                         burst_date = bloom_date - timedelta(days=28),
                         bloom_date = bloom_date,
                         nbfruits = nbfruits,
                         
                         length=0.01,
                         final_size=final_size_inflo,
                         diam=0.01,
                         
                         growth_tts = growth_tts,
                         pheno_tts  = pheno_tts)

def generate_elements(apexparam):
    global new_elements
    new_elements = True
    
    # GU is composed of leaves and internodes
    guparam = set_dimension_parameters_GU(apexparam)
    current = apexparam.mtgid
    
    nproduce  GU( guparam )
    
    is_base = to_be_developped(current) == True # (guparam.burst_date is None)
    if not is_base:    
      guparam.isbase = False
      guparam.simplified = False
      guparam.leafy = True
      nproduce Internode(ParameterSet(length=0.01,final_size_organ=guparam.LEPF,diam=0.01), guparam) /(phyllotaxy) 
      nproduce [ Leaf(ParameterSet(position=0,size=0.1,final_size=guparam.final_size_Leaf*leaflength(0) ), guparam) ]
      
      # each internode is smaller than de previous
      totintlength=0
      for j in xrange(1,guparam.nb_internodes-1): totintlength+=exp(-2.64*j/float(guparam.nb_internodes-1))
      for i in xrange(1,guparam.nb_internodes-1):        
        nproduce  Internode(ParameterSet(length=0.01,final_size_organ=(guparam.final_size_GU-guparam.LEPF)*exp(-2.64*i/float(guparam.nb_internodes-1))/totintlength,diam=0.01), guparam) /(phyllotaxy) 
        nproduce [ Leaf(ParameterSet(position=i/float(guparam.nb_internodes-1),size=0.1,final_size=guparam.final_size_Leaf*leaflength(i/float(guparam.nb_internodes-1)) ), guparam) ]
      # End of GU
      nproduce GUEnd(guparam)
    else:
      guparam.isbase = True
      guparam.simplified = True
      guparam.leafy = mtg.parent(current) != None
      guparam.scale = 1 + (1 * nbdescendants[current] / nbdescendants[first_uc])
      
    
    children = mm.vegetative_children(mtg, current)
    apical_child = [c for c in children if mm.is_apical(mtg, c)]
    lat_children = [c for c in children if mm.is_lateral(mtg,c)]
    
    inflo = mm.inflorescence_children(mtg, current)
    nb_inflorescences = len(inflo)
    nb_lat_children = len(lat_children)
    nb_lat_inflo = nb_inflorescences if len(apical_child) > 0 else max(0,nb_inflorescences-1)
    nb_lat_elements = nb_lat_children + nb_lat_inflo
    if nb_lat_children > 0:
      lat_angle = 360./nb_lat_elements
    nb_proc_lat = 0
    for ch in lat_children:
        nproduce  [ /(lat_angle*nb_proc_lat+60) &(60)
        nb_proc_lat += 1
        if to_be_developped(ch, current_date): 
           generate_elements( generate_parameters_GU(ch, nbdescendants[ch]) )
           # nproduce B( generate_parameters_GU(ch, nbdescendants[ch]) )
        else:  
           nproduce A( generate_parameters_GU(ch) )
        nproduce ]
    if len(apical_child) > 0:
      if len(inflo) > 0 and WITH_INFLO:
        for i in xrange(1,len(inflo)):
          nproduce   [ /(lat_angle*nb_proc_lat) &(60) Inflorescence_bud(generate_parameters_Inflo(inflo[i], guparam)) ]
          nb_proc_lat += 1
      ch = apical_child[0]
      if  to_be_developped(ch, current_date):  
        generate_elements( generate_parameters_GU(ch, nbdescendants[ch]) )
        # nproduce B( generate_parameters_GU(ch, nbdescendants[ch]))
      else:   
        nproduce A( generate_parameters_GU(ch) )
    
    elif len(inflo) > 0:
      if WITH_INFLO:
        nproduce Inflorescence_bud(generate_parameters_Inflo(inflo[0], guparam))


###### Generation and initialization of elements #########

# Function who return an organ (Leaf, Internode or GU) length 
def growth_function(type, T,  FinalSize_organ, FinalSize = None, t_ip = None):
  """ Sigmoid function used to compute growth of organs """
  if FinalSize is None: FinalSize = FinalSize_organ
  
  if type == eGU:                                  # GUs
    maxER = 0.0111513*FinalSize                     # relationship between final size and maximum growth rate for GUs
    B = FinalSize/(4*maxER)   
    y = FinalSize_organ/(1+exp(-(T-t_ip)/B))        # sigmoid equation
  
  elif type == eLeaf:                            # Leafs
    maxER = -0.0188725+0.0147985*FinalSize
    B = FinalSize/(4*maxER)
    y = FinalSize_organ/(1+exp(-(T-t_ip_Leaf)/B))
    
  elif type == eInflorescence:                                           # Inflorescences
    maxER = 0.0049161*FinalSize 
    B = FinalSize/(4*maxER)
    y = FinalSize_organ/(1+exp(-(T-t_ip_Inflo)/B))
  
  return y

def gu_growth(p):
    # Update of parameters                               
    for tts in [p.gu_growth_tts, p.leaf_growth_tts, p.gu_pheno_tts]:
        tts.accumulate(current_temperature)    
    
    if not (p.burst_date is None): 
      p.length = growth_function(eGU, p.gu_growth_tts.ttsum, p.final_size_GU, t_ip = p.t_ip)  # GU's length calculation
    p.diam = growth_function(eGU, p.gu_growth_tts.ttsum, final_diamI, t_ip = p.t_ip)                            # GU's diameter calculation

def inflo_growth(p):
  if p.pheno_tts.stage < 4 :
    p.growth_tts.accumulate(current_temperature)
    p.pheno_tts.accumulate(current_temperature)
    
    p.length = growth_function(eInflorescence, p.growth_tts.ttsum, p.final_size)

def gu_develop(p):
  if not p.simplified :
    if p.gu_pheno_tts.stage==4 :  # if pheno stage=4 we replace leaves and internodes by a fixed structure
        nproduce GU(p) [ %
        p.simplified = True
    else:
      gu_growth(p)
      nproduce GU(p)
  else: 
    nproduce GU(p)

initial_view = 1

Axiom: 
  nproduce  Information 
  nproduce @Tp(0,0,1) @Ts(Elasticity) # @Gc
  nproduce Tree(ParameterSet(treename=treename, variety='cogshall', date=current_date,seed=SEED, mtgid=treeid))
  trunkparam = generate_parameters_GU(first_uc,nbdescendants[first_uc])
  generate_elements(trunkparam)

derivation length: int(nbsteps)
ignore: / &

production:

decomposition:
maximum depth: max(height_max - +1,height_max_3+1)

A( p ):
  if  p.burst_date <= current_date :
    generate_elements(p)


Inflorescence_bud(p):
  global inflo_flush_start
  if  p.burst_date <= current_date :
     if inflo_flush_start is None: inflo_flush_start = p.burst_date
     produce Inflorescence(p)

production:

#group 0: # pipe model

group 1: # pipemodel

consider: GU

GU(p) >> x([ GU(pl) ]) GU(pa):
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+pa.nbdescendants+1
  p.radius = estimate_radius(p.nbdescendants)
  gu_develop(p)


GU(p) >> x([ GU(pl) ]) :
  n1 = p.nbdescendants
  p.nbdescendants = sum([pli.nbdescendants for pli in pl])+1
  p.radius = estimate_radius(p.nbdescendants)
  gu_develop(p)

group 0:

GU(p) :
  gu_develop(p)


GUEnd(p):
  if p.gu_pheno_tts.stage == 4 and not p.simplified :
      # simplification process
      produce GUEnd(p) ] 
  else :
    produce GUEnd(p)

Internode(param, p):
  # calcul de la taille de l'entrenoeud
  param.length = growth_function(eGU, p.gu_growth_tts.ttsum, param.final_size_organ, p.final_size_GU, p.t_ip)  
  # calcul du diametre de l'entrenoeud
  param.diam = growth_function(eGU, p.gu_growth_tts.ttsum, final_diamI, t_ip =p.t_ip)
  produce Internode(param,p) 

Leaf(param, p): 
  param.size = growth_function(eLeaf, p.leaf_growth_tts.ttsum, param.final_size)
  #leaf_area = 0.18 * (param.size**2)
  produce Leaf(param,p) 
  
  
Inflorescence(param): 
  new_param=param.copy()
  inflo_growth(new_param)
  produce Inflorescence(new_param) 


interpretation:
maximum depth:10

# Setup  tropism and legend
# Note that the 2D legend cause a crash of lpy when recording the animation
Information : 
  if TIMEBAR:
    ar = False
    envsize = 0.8
    nproduce [ @2D @R @Ts(0),(5) @M(-0.85,-0.85) 
    nproduce Label('Tree : '+treename+'. Date: '+str(current_date.year)+'-'+str(current_date.month).zfill(2)+'-'+str(current_date.day).zfill(2)+'. Cycle: '+str(get_cycle(current_date)),14)
    clength = (current_date - first_date).days/float((last_date - first_date).days)
    nproduce ,(4) @M(-0.91,-0.9) -(90) _(0.04) F(0.01)
    if clength > 0:
      nproduce ,(2) @M(-0.9,-0.9) _(0.03) F(clength*envsize)
      nproduce ,(3) @M(-0.9+clength*envsize,-0.9) _(0.04) F(0.01)  
    if clength < 1:
      nproduce ,(4) @M(-0.9+envsize,-0.9) _(0.04) F(0.01)
      nproduce ,(5) @M(-0.9,-0.9) _(0.02) F(envsize)
    nproduce ]
  if BACKGROUND:
    scale = 200
    nproduce [ ,(30) @M(-1.5*scale,0,0) _(scale) TextureScale(1./(2*scale)) TextureTranslation(0.5,0) @b(1.5*scale)  ]
    nproduce [ ,(31) @M(-1.5*scale,0,0) ^(90) _(scale) TextureScale(1./(2*scale)) TextureTranslation(0.5,0) @b(scale)  ]


Inflorescence(param):
   length = param.length
   growth_ttsum = param.growth_tts.ttsum
   pheno_stage = param.pheno_tts.stage
   pheno_rank  = param.pheno_tts.rank_in_stage()
   nproduce [   
   if ( growth_ttsum >= 800):
       nproduce ,(1) @O(0.01)
   else:
      if FULL_RESOLUTION: 
          nproduce _(length/100.) 
          NbAxe2=int(1.19*param.final_size)
          
          if not hasattr(param,'phyloangles'):
             param.phyloangles = [ ((60 + randint(0,30)) if (i < 8 or i > 19) else 220) for i in xrange(NbAxe2) ] 
          internode_length = length/NbAxe2
          for k in xrange(0,NbAxe2):
            nproduce InterpolateColors(13,pheno_color[pheno_stage+1],(pheno_rank+pheno_stage)*(1-float(k)/NbAxe2)/(2.1-max(0,pheno_rank+pheno_stage-1)) ) 
            # On choisi la couleur en fonction du stade et de son avancement
            nproduce F(internode_length,internode_length/5.) \(param.phyloangles[k])
            nproduce [@Ts(0.05) @Tp(0,0,1)  +(65) Flower(float(k)/NbAxe2,length,max(length/10.,length*0.687 - 3.97)*(NbAxe2-k)/NbAxe2, pheno_stage, pheno_rank)] 
      else:
          nproduce InterpolateColors(pheno_color_flower[pheno_stage],pheno_color_flower[pheno_stage+1],pheno_rank) _(length/10) F(length,0.1)
   produce ]
   
   
Flower(pos,age,l,pheno,pheno_advct):
  deb, ind_deb = 0, 0
  for k in xrange(0,10):
      if pos<0.7: nproduce InterpolateColors(13,pheno_color[pheno+1],(pheno_advct+pheno)*(1-float(k)/10)) 
      # On choisi la couleur en fonction du stade et de son avancement
      nproduce F(l/10.,l/100.)  
      k2=k
      pos2=pos
      if k>3:
        if deb==1: 
          k2-=1/10*ind_deb
          pos2-=1/10*ind_deb
        if pheno>=2: 
          ind_col=min(1,(pheno_advct+max(0,pheno-2)+1-pos2+1-k2/10.)/3.)
          if pheno==3: ind_col=0.7
          deb=1
          ind_deb+=1
          if (ind_col<0.5 and pheno==2) :ind_col=min((age+k/10.)/100.,0.3) +min(1,max(0,pheno+pheno_advct-1))/5.
        else : ind_col=min((age+k/10.)/100.,0.3) +min(1,max(0,pheno+pheno_advct-1))/10. 
        
        for d in xrange (0,3):
          if pheno>=2:
            if ind_col<0.5:
              nproduce [ \(120*d+k*2) +(75) F(l/5*(9-k)/18,0.02),(4) InterpolateColors(pheno_color_flower[pheno],pheno_color_flower[pheno],(pheno_advct+(13-k)/10.)/2.) @O(min((age+k/10.)/100.,0.3) +min(1,max(0,pheno+pheno_advct-1))/10. )]
            else:
              nproduce [ \(120*d+k*2) +(75) F(l/5*(9-k)/18,0.02),(4) InterpolateColors(pheno_color_flower[pheno],pheno_color_flower[pheno+1],ind_col) @O(ind_col)]
          else:
            nproduce [ \(120*d+k*2) +(75) F(l/5*(9-k)/18,0.02),(4) InterpolateColors(pheno_color_flower[pheno],pheno_color_flower[pheno+1],ind_col) @O(ind_col)]



GU(p):
  if p.simplified :
    radius = p.radius
    if p.leafy :
      nproduce ,(1) _(radius) F(p.LEPF,radius) /(phyllotaxy) 
      if LEAFY: nproduce [ fLeaf(0,p.final_size_Leaf*leaflength(0)) ]
      totintlength=0
      for j in xrange(1,p.nb_internodes-1): totintlength+=exp(-2.64*j/float(p.nb_internodes-1))
      for i in xrange(1,p.nb_internodes-1):
        length=(p.final_size_GU-p.LEPF)*exp(-2.64*i/float(p.nb_internodes-1))/totintlength
        nproduce  F(length, radius) /(phyllotaxy) 
        if LEAFY: nproduce [ fLeaf(i/float(p.nb_internodes-1),p.final_size_Leaf*leaflength(i/float(p.nb_internodes-1)) ) ]
    else:
      produce ,(21) _(radius) nF(p.final_size_GU*p.scale, p.final_size_GU/InternodeRes , radius) 

Internode(param,p):
  if not p.simplified:
      produce _(param.diam) F(param.length,param.diam) 


fLeaf(position, size):
  nproduce [ /(137.5) &(90) ,(1)  F(0.001,leafdiam(0)*leafwidth(1))  ^(90) 
  # petiole
  nproduce &(pheno_angle[4]) Petiole((1-position)* size/4.,leafdiam(0))   
  nproduce @Ge ,(13) @Gc _(leafdiam(0.5))  Sweep(axis5, leafsection, size, size/LeafLengthRes, size*0.24, leafdiam) 
  nproduce ]  

Leaf(paramL, paramI) :
  global LeafDebug
  if not paramI.simplified:
    pheno_stage = paramI.gu_pheno_tts.stage
    pheno_rank  = paramI.gu_pheno_tts.rank_in_stage()
    if(pheno_stage < 4):
      nproduce @Ts(0)
      nproduce,(2) [ /(137.5) &(90) ,(1)  f(0) F(0.001,leafdiam(0)*leafwidth(min((paramI.leaf_growth_tts.ttsum+1)/378.,1)))  ^(90) 
      # Angle depends of phenological stage and advancement
      nproduce &((1-pheno_rank)*pheno_angle[pheno_stage]+pheno_rank*pheno_angle[pheno_stage+1]) 
      # petiole
      petiolelength = max(0.01,(1-paramL.position)* paramL.size/4.)
      petiolewidth  = leafdiam(0)*leafwidth(min((paramI.leaf_growth_tts.ttsum+1)/378.,1))
      nproduce  Petiole(petiolelength,petiolewidth)  
      # Color depends of phenological stage and advancement
      nproduce InterpolateColors(pheno_color[pheno_stage],pheno_color[pheno_stage+1],pheno_rank)
      dayage = (current_date-paramI.burst_date).days
      # Leaf curvature depends of phenological stage and advancement
      maxwidth = (paramL.size*0.24)*leafwidth(min((dayage+1)/20.,1))
      nproduce @Ge @Gc _(leafdiam(paramI.diam))  Sweep(axisfunc.getAt(min(1,(pheno_stage+pheno_rank)/(Nb_stades_pheno-2))),leafsection, paramL.size, paramL.size/LeafLengthRes, maxwidth, leafdiam) ]  

Petiole(length,radius):
  nproduce SetGuide(petioleCurve,length) nF(length, length/PetioleRes,radius)

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (71,91,46) , diffuse = 1.67033 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_7 = pgl.Material("Color_7" , ambient = (62,125,20) , diffuse = 2.04 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (78,102,23) , diffuse = 1.50437 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_9 = pgl.Material("Color_9" , ambient = (70,113,21) , diffuse = 1.77218 , )
	Color_9.name = "Color_9"
	context.turtle.setMaterial(9,Color_9)
	Color_10 = pgl.Material("Color_10" , ambient = (95,79,27) , diffuse = 0.968421 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (121,46,33) , diffuse = 0.165289 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (60,60,15) , diffuse = 3 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (30,60,10) , diffuse = 1.68333 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_14 = pgl.Material("Color_14" , ambient = (55,60,14) , diffuse = 3 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	Color_15 = pgl.Material("Color_15" , ambient = (159,235,97) , diffuse = 0.680851 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
	Color_16 = pgl.Material("Color_16" , ambient = (255,82,108) , diffuse = 0.627451 , )
	Color_16.name = "Color_16"
	context.turtle.setMaterial(16,Color_16)
	Color_20 = pgl.Material("Color_20" , ambient = (0,0,0) , diffuse = 14.5455 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_21 = pgl.Material("Color_21" , ambient = (51,50,16) , diffuse = 1.78431 , )
	Color_21.name = "Color_21"
	context.turtle.setMaterial(21,Color_21)
	PGL_140594668377360 = pgl.ImageTexture("PGL_140594668377360" , "/Users/fboudon/Develop/vplants/branches/mangosim/share/anim/background.JPG" , )
	PGL_140594668377360.name = "PGL_140594668377360"
	Color_30 = pgl.Texture2D(image = PGL_140594668377360 , )
	Color_30.name = "Color_30"
	context.turtle.setMaterial(30,Color_30)
	PGL_140599487343936 = pgl.ImageTexture("PGL_140599487343936" , "/Users/fboudon/Develop/vplants/branches/mangosim/share/anim/soil.JPG" , )
	PGL_140599487343936.name = "PGL_140599487343936"
	Color_31 = pgl.Texture2D(image = PGL_140599487343936 , )
	Color_31.name = "Color_31"
	context.turtle.setMaterial(31,Color_31)
	context.animation_timestep = 0.001
	context.options.setSelection('Module declaration',1)
	context.options.setSelection('Warning with sharp module',0)
	scalars = [('Geometry', 'Category'), ('LEAFY', 'Bool', False), ('WITH_INFLO', 'Bool', True), ('FULL_RESOLUTION', 'Bool', False), ('Elasticity', 'Float', 0.02, 0.0, 1.0, 2), ('Data Export', 'Category'), ('EXPORT_TO_MTG', 'Bool', False), ('SAVE_MTG', 'Bool', False), ('Simulation', 'Category'), ('TREE', 'Integer', 4, 0, 4), ('SEED', 'Integer', 1, 0, 100), ('daystep', 'Integer', 1, 1, 100), ('temperature_variability', 'Bool', False), ('FRUIT_MODEL', 'Bool', True), ('Environment', 'Category'), ('TIMEBAR', 'Bool', True), ('BACKGROUND', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsize = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.431282, 1),(0.324129, 0.436757, 1),(0.408886, 0.416427, 1),(0.412274, 0.708684, 1),(0.844357, 0.703533, 1),(1, 0.246499, 1)]) , 
	    )
	leafsize.name = "leafsize"
	import openalea.plantgl.all as pgl
	axis1 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.214286, 0.00865801, 1),(0.45671, 0.138528, 1)]) , 
	    )
	axis1.name = "axis1"
	axis2 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.209957, -0.017316, 1),(0.491342, -0.0952381, 1)]) , 
	    )
	axis2.name = "axis2"
	axis3 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, 0, 1),(0.5, 0, 1)]) , 
	    )
	axis3.name = "axis3"
	axis4 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.158009, -0.047619, 1),(0.166667, 0.004329, 1),(0.443723, -0.393939, 1)]) , 
	    )
	axis4.name = "axis4"
	axis5 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	axis5.name = "axis5"
	leaflength = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 1, 1),(0.00149779, 1.00072, 1),(1, 0.995671, 1),(1, 0.400121, 1)]) , 
	    )
	leaflength.name = "leaflength"
	petioleCurve = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.543785, 0.192006, 1),(-0.178289, 0.176044, 1),(-0.0656355, 0.0728558, 1),(0.548469, 0.597983, 1),(0.397151, 0.581459, 1),(0.543571, 0.599108, 1)]) , 
	    )
	petioleCurve.name = "petioleCurve"
	leafwidth = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0123039, 1),(0.289062, 0.0763736, 1),(0.289062, 0.454469, 1),(0.331839, 0.989763, 1),(1, 1, 1)]) , 
	    )
	leafwidth.name = "leafwidth"
	leafpath = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.145022, -0.0735931, 1),(0.0844156, -0.212121, 1),(0.123377, -0.497835, 1)]) , 
	    )
	leafpath.name = "leafpath"
	inflo_elasticity = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0278664, 1),(0.341991, 0.034632, 1),(0.675325, 0.04329, 1),(1, 0.252183, 1)]) , 
	    )
	inflo_elasticity.name = "inflo_elasticity"
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.508209, 0.16873, 1),(-0.515031, 0.138195, 1),(-0.198373, -0.0924227, 1),(-0.00298323, 0.188761, 1),(0.0897461, -0.106293, 1),(0.555704, 0.0979703, 1),(0.545047, 0.12817, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0846264, 1),(0.239002, 1.00091, 1),(0.485529, 0.991241, 1),(0.718616, 1.00718, 1),(0.877539, 0.231273, 1),(1, 0.00332359, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	inflo_radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.160173, 1),(0.393939, 0.151515, 1),(0.735931, 0.0649351, 1),(1, 0.025974, 1)]) , 
	    )
	inflo_radius.name = "inflo_radius"
	radius_base03 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.131507, 1),(0.00454138, 0.0251277, 1),(0.578848, 0.00694723, 1),(1, 0.00524218, 1)]) , 
	    )
	radius_base03.name = "radius_base03"
	radius = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.107326, 1),(0.192635, 0.0975655, 1),(0.457142, 0.000244746, 1),(1, 0.026087, 1)]) , 
	    )
	radius.name = "radius"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 2'},[('Function',leafsize),('Curve2D',axis1),('Curve2D',axis2),('Curve2D',axis3),('Curve2D',axis4),('Curve2D',axis5),('Function',leaflength),('Curve2D',petioleCurve),('Function',leafwidth),('Curve2D',leafpath),('Function',inflo_elasticity),('Curve2D',leafsection),('Function',leafdiam),('Function',inflo_radius),('Function',radius_base03),('Function',radius)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafsize',leafsize),('leaflength',leaflength),('leafwidth',leafwidth),('inflo_elasticity',inflo_elasticity),('leafdiam',leafdiam),('inflo_radius',inflo_radius),('radius_base03',radius_base03),('radius',radius),]
	context["__curves__"] = [('axis1',axis1),('axis2',axis2),('axis3',axis3),('axis4',axis4),('axis5',axis5),('petioleCurve',petioleCurve),('leafpath',leafpath),('leafsection',leafsection),]
	context["__parameterset__"] = parameterset
	context["leafsize"] = pgl.QuantisedFunction(leafsize)
	context["axis1"] = axis1
	context["axis2"] = axis2
	context["axis3"] = axis3
	context["axis4"] = axis4
	context["axis5"] = axis5
	context["leaflength"] = pgl.QuantisedFunction(leaflength)
	context["petioleCurve"] = petioleCurve
	context["leafwidth"] = pgl.QuantisedFunction(leafwidth)
	context["leafpath"] = leafpath
	context["inflo_elasticity"] = pgl.QuantisedFunction(inflo_elasticity)
	context["leafsection"] = leafsection
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["inflo_radius"] = pgl.QuantisedFunction(inflo_radius)
	context["radius_base03"] = pgl.QuantisedFunction(radius_base03)
	context["radius"] = pgl.QuantisedFunction(radius)
