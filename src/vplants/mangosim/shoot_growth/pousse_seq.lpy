from datetime import *
from openalea.plantgl.all import *
from math import *
from random import *

def bern(p):
    if random()<p:
        return 1
    else:
        return 0
def neg_binom(n,p):
    somme=0
    tot=0
    while (somme < n): 
        somme+=bern(p)
        tot+=1
    return tot-somme


current_date = datetime(2003,7,1)
delta_date = timedelta(days=1)

def Start():
  global current_date
  current_date = datetime(2003,7,1)

def StartEach():
  global current_date
  current_date += delta_date


sNone, sB1, sB2, sC, sD, sE, sF, sG, SH, sEnd = range(10)
NbInternode = 10
phyllotaxy = 137.5

stageLength = { sB1: neg_binom(20,0.9), sB2 : 1, sC : 2, sD : 3, sE : 3, sF : 2, sG: 2, SH : 2 , sEnd: 5}
IAGR = { sB1: 0.01, sB2 : 0.01, sC : 0.02, sD : 0.1, sE : 0.1, sF : 0.05, sG : 0.01, SH : 0.01, sEnd: 0}
LAGR = IAGR

module Bud(burstdate) : scale = 1
module UC(burstdate, phenostage, phenoage) : scale = 1
module Internode(size), Leaf(position, size) : scale = 2
module Env

Axiom: Env Bud(current_date+timedelta(days=2))

derivation length: 100
production:

Bud(burst):
  if burst == current_date:
    nproduce UC(burst,sB1,0)
    for i in xrange(NbInternode):
      nproduce Internode(0.1) /(phyllotaxy) [ Leaf(i/float(NbInternode), 0.1) ]

UC(bd, spheno, phenoage):
  if spheno== sEnd:
    produce UC(bd, spheno, phenoage)
  else:
    phenoage += 1
    if phenoage >= stageLength[spheno]:
      spheno, phenoage = spheno+1, 0
    produce UC(bd, spheno, phenoage)

UC(bd, spheno, phenoage) << Internode(size):
  produce Internode(size + IAGR[spheno])

UC(bd, spheno, phenoage) << Leaf(position, size):
  produce Leaf(position, size + LAGR[spheno])



interpretation:

Internode(size) --> F(size)

Leaf(pos, size) --> ,(2) [ /(137.5) &(90)f(0.0),(2)   @Gc _(leafdiam(0)) Sweep(leafpath,leafsection, size*3, size*3/10., size*3, leafdiam) ]

Bud(burstdate) --> ,(3) @O(0.11)

Env --> Label(str(current_date)) #@g(ScreenProjected(Translated(-0.5,-0.7,0,Text(str(current_date)))))

endlsystem



   


###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.options.setSelection('String matching',2)
	context.options.setSelection('Early return when no matching',0)
	import openalea.plantgl.all as pgl
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0359806, 1),(0.146454, 0.203327, 1),(0.34022, 0.310394, 1),(1, 0.0239871, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	import openalea.plantgl.all as pgl
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.432297, 0.393438, 1),(-0.496109, 0.253958, 1),(-0.198373, -0.0924227, 1),(-0.00298323, 0.188761, 1),(0.0897461, -0.106293, 1),(0.497908, 0.285806, 1),(0.424119, 0.385331, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafpath = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	leafpath.name = "leafpath"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',leafdiam),('Curve2D',leafsection),('Curve2D',leafpath)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafdiam',leafdiam),]
	context["__curves__"] = [('leafsection',leafsection),('leafpath',leafpath),]
	context["__parameterset__"] = parameterset
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["leafsection"] = leafsection
	context["leafpath"] = leafpath
