import transfert_mtg_to_lpy
reload(transfert_mtg_to_lpy)
from transfert_mtg_to_lpy import *
from datetime import date


tree = cogshall_trees[TREE]
line_trunk = tree + 3

order_max = 11

module UC(order_k)

Axiom: G B(line_trunk,0)

derivation length: order_max
production:

B(vertice,order_k):
  nproduce /(144) B_UC(order_k)
  Pchilds,Mchilds = get_children_P_M(vertice)
  if len(Pchilds) > 0 : 
    apical, lateral = get_apical_lateral_position(Pchilds)
    if len(lateral) > 0:
      for nb in range(1,len(lateral)+1):
        nproduce /(360./(len(lateral) ) )[&(70) @Gc B(lateral[nb-1],order_k+1)] @Ge
    if apical != None:
      produce B(apical,order_k+1)
  if len(Mchilds) > 0:
    apical, lateral = get_apical_lateral_position(Mchilds)
    if len(lateral) > 0:
      for nb in range(1,len(lateral)+1):
        nature_bud = get_nature_2003(lateral[nb-1])
        nproduce /(360./(len(lateral) ) )[&(70) @Gc A(date(2003,3,1),0, nature_bud)] @Ge
    if apical !=None:
      nature_bud = get_nature_2003(apical)
      produce A(date(2003,3,1),0, nature_bud)


interpretation:

UC(order_k):
  color = 1
  lradius =  radius_base03( order_k/float(order_max) )
  scale = 1.5
  ds = scale/4
  for i in xrange(1,5):
    nproduce ,(color) _(lradius) @Gc nF(ds,lradius) @Ge

# to verifie if it's ok
A(date,order,state):
  if state == "V":
    produce ,(2) _(0.4) F(0.6,0.001)
  elif state == "F":
    produce ,(4) _(0.4) F(0.6,0.001)

# Setup  tropism and legend
# Note that the 2D legend cause a crash of lpy when recording the animation
G --> @Tp(0,0,1) @Ts(Elasticity)




endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (70,48,16) , diffuse = 1.6 , specular = (48,48,48) , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_7 = pgl.Material("Color_7" , ambient = (35,35,35) , diffuse = 1.05714 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	scalars = [('TREE', 0, 0, 4), ('Elasticity', 0.05, 0.0, 1.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] is None : context[s[0]] = s[1]
	import openalea.plantgl.all as pgl
	radius_base03 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.402109, 1),(0, 0.254588, 1),(0.596888, 0.160351, 1),(1, 0.100423, 1)]) , 
	    )
	radius_base03.name = "radius_base03"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 2'},[('Function',radius_base03)])
	parameterset = [panel_0,]
	context["__functions__"] = [('radius_base03',radius_base03),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["radius_base03"] = pgl.QuantisedFunction(radius_base03)
