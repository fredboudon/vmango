from datetime import *
from openalea.plantgl.all import *
from math import *
from random import *
from math import degrees

# Choix des parametres
current_date = datetime(2003,7,1)                                   
t_ip_GU=178.792
t_ip_Leaf=182.04

base_temperature_GU=9.2
base_temperature_Leaf=10.73

temperature=[25 for i in xrange(NbOfDays+1)]

# Initialisation des variables
totlength = []                          # vecteur des longueurs de l'UC
phyllotaxy = 144+randint(-2,2) #137.5
final_diamI = 0.2
temp_index=0

# Choix du pas de temps : 1/24 = une heure
if DAILY:
  pdt = 1
else:
  pdt=1/24.                              
delta_date = timedelta(hours=24*pdt)

# Definition stades phenologiques
pheno_change_temp=[0,60,120,180,240,300,378,450]
pheno_color=[7,8,9,10,11,12,14,13]
pheno_angle=[0,5,20,45,135,90,50,50,50]
Nb_stades_pheno=8

# Definition des probabilites
GU_length_apic_apic_mean=18.14
GU_length_apic_apic_sd=4.14
GU_length_apic_lat_mean=13.79
GU_length_apic_lat_sd=4.03
GU_length_lat_mean=12.59
GU_length_lat_sd=3.38
Leaf_length_apic_mean=17.06
Leaf_length_apic_sd=2.7
Leaf_length_lat_mean=14.87
Leaf_length_lat_sd=2.7

# Fct qui renvoit le stade pheno et l'avancement (entre 0 et 1) dans ce stade
def normalized_pheno_stage(cumtemp,pheno_stage = None):
  # Si le stade pheno n'est pas connu on le cherche
  if pheno_stage == None:
    if cumtemp > pheno_change_temp[-1]:
      pheno_stage=Nb_stades_pheno-1
    else:
      i=Nb_stades_pheno-2
      while i!=0:
        if cumtemp > pheno_change_temp[i]:
          pheno_stage=i
          i=0
        else:
          i=i-1     
      if pheno_stage==None: pheno_stage=0
  # Sinon on verifie si on passe au stade suivant
  if pheno_stage == (Nb_stades_pheno-1):
    pheno_advancement =0
  else:
    entry_pheno_temp=pheno_change_temp[pheno_stage]
    exit_pheno_temp=pheno_change_temp[pheno_stage+1]
    if cumtemp > exit_pheno_temp:
      pheno_advancement =0
      pheno_stage+=1
    else:
      pheno_advancement =(cumtemp-entry_pheno_temp)/(exit_pheno_temp-entry_pheno_temp)
  return [pheno_advancement, pheno_stage]


def retrieveCurves():
  # Determine the set of curve representing axis at different time. 
  # Look for object in global namespace name axisX 
  curves = [(n,v) for n,v in globals().items() if 'axis' in n and type(v) == BezierCurve2D ]
  
  # sort curves according to their names
  for n,v in curves: v.name = n
  curves = [v for n,v in curves]
  curves.sort(lambda x,y : cmp(x.name,y.name))
  return curves

def ProfileInterpolation(curves,knotlist = None,degree = 3):
    nbcurves = len(curves)
    if knotlist is None: knotlist = [i/float(nbcurves-1) for i in xrange(nbcurves)]
    k = [knotlist[0] for i in xrange(degree-1)]+knotlist+[knotlist[-1] for i in xrange(degree-1)]
    pts = [[(i.x,i.y,0,1) for i in c.ctrlPointList] for c in curves]
    ppts = Point4Matrix(pts)
    p = NurbsPatch(ctrlPointList=ppts,udegree=degree,vdegree=3)
    def getSectionAt(t): 
      section = p.getIsoUSectionAt(t)
      return NurbsCurve2D([(i.x,i.y,i.w) for i in section.ctrlPointList], section.knotList,section.degree)
    p.getAt = getSectionAt
    return p

curves = retrieveCurves()
axisfunc = ProfileInterpolation(curves,[0,0.1,0.5,0.8,0.95,1])

def Start():
  global current_date
  current_date = datetime(2003,7,1)
  global totlength
  totlength = [(0,0)]

def StartEach():
  global current_date
  # On verifie si on passe au jour suivant
  if ((current_date.month!=(current_date+delta_date).month) or (current_date.day!=(current_date+delta_date).day)):
    global temp_index
    temp_index+=1
  current_date += delta_date
  global length_inter
  length_inter=0.0001   #initialisation a 0
  global age_inter
  age_inter=0.0001
  global temperature
  global delta_temperature_GU
  delta_temperature_GU=max(0,temperature[temp_index]-base_temperature_GU)
  global delta_temperature_Leaf
  delta_temperature_Leaf=max(0,temperature[temp_index]-base_temperature_Leaf)

  
  
def GrowthCurve(T,FinalSize,type):
  if type=="GU":
    maxER=0.0111513*FinalSize
    B=FinalSize/(4*maxER)
    y=FinalSize/(1+exp(-(T-t_ip_GU)/B))
  else:
    maxER=-0.0188725+0.0147985*FinalSize
    B=FinalSize/(4*maxER)
    y=FinalSize/(1+exp(-(T-t_ip_Leaf)/B))
  return(y)
  





module Bud(burstdate,position,mother_position) 
module Internode(length, age, final_size, diam, pheno_stage,cumsum_temp,pheno_advct), Leaf(position, length, age, final_size,cumsum_temp)
module Env

Axiom: Env @Ts(0.02) Bud(current_date+timedelta(days=2),"A","A")

derivation length: int(NbOfDays/pdt)
production:

Bud(burst,position,mother_position):
  if (burst == current_date) :
    if position=="A":
      nb_chil=randint(2,5)
      hypo=gauss(2.63,1.72)
      if (mother_position=="A"):
        final_size_internode=gauss(GU_length_apic_apic_mean,GU_length_apic_apic_sd)
        while (final_size_internode <5) or (final_size_internode >25):
          final_size_internode=gauss(GU_length_apic_apic_mean,GU_length_apic_apic_sd)
      else:
        final_size_internode=gauss(GU_length_apic_lat_mean,GU_length_apic_lat_sd)
        while (final_size_internode <5) or (final_size_internode >25):
          final_size_internode=gauss(GU_length_apic_lat_mean,GU_length_apic_lat_sd)
      final_size_leaf=gauss(Leaf_length_apic_mean,Leaf_length_apic_sd)
      while (final_size_leaf <5) or (final_size_leaf >34):
        final_size_leaf=gauss(Leaf_length_apic_mean,Leaf_length_apic_sd)
        
    else:
      nb_chil=randint(1,4)
      final_size_internode=gauss(GU_length_lat_mean,GU_length_lat_sd)
      while (final_size_internode <5) or (final_size_internode >25):
        final_size_internode=gauss(GU_length_lat_mean,GU_length_lat_sd) 
      hypo=final_size_internode*0.38+0.88+randint(-1,1)
      final_size_leaf=gauss(Leaf_length_lat_mean,Leaf_length_lat_sd)
      while (final_size_leaf <5) or (final_size_leaf >34):
        final_size_leaf=gauss(Leaf_length_lat_mean,Leaf_length_lat_sd)
       
    final_size_internode=max(1,final_size_internode-hypo)
    NbInternode=int(max(ceil(0.6*final_size_internode)+randint(-1,1),1))
    
    nproduce Internode(ParameterSet(length=0.01,age=0,final_size=hypo,diam=0.01,pheno_stage=0,cumsum_temp=0.0001,pheno_advct=0)) /(phyllotaxy) [ &(0) Leaf(ParameterSet(position=0,size=0.1,age=0,final_size=final_size_leaf*leaflength(0),cumsum_temp=0.0001)) ]
    totintlength=0
    for j in xrange(1,NbInternode-1): totintlength+=exp(-2.64*j/float(NbInternode-1))
    for i in xrange(1,NbInternode-1):
      nproduce  Internode(ParameterSet(length=0.01,age=0,final_size=final_size_internode*exp(-2.64*i/float(NbInternode-1))/totintlength,diam=0.01,pheno_stage=0,cumsum_temp=0,pheno_advct=0)) /(phyllotaxy) [ &(0) Leaf(ParameterSet(position=i/float(NbInternode-1),size=0.1,age=0,final_size=final_size_leaf*leaflength(i/float(NbInternode-1)),cumsum_temp=0.0001)) ]   
      
    if nb_chil>1:
          angle=360./(nb_chil-1) +randint(-20,20)
          for i in xrange(0,nb_chil-1):
            nproduce /(angle) [&(60) Bud(current_date+timedelta(days=60),"L",position) /(i*137.5) ]
          produce Bud(current_date+timedelta(days=60),"A",position)


Internode(param):
  new_param=param.copy()
  new_param.age += pdt
  global delta_temperature_GU
  new_param.cumsum_temp+= delta_temperature_GU*pdt
  [pheno_advct_stage,new_param.pheno_stage]=normalized_pheno_stage(new_param.cumsum_temp) #,new_param.pheno_stage
  new_param.pheno_advct=pheno_advct_stage
  l = GrowthCurve(new_param.cumsum_temp,new_param.final_size,"GU")
  d = GrowthCurve(new_param.cumsum_temp,final_diamI,"GU")
  new_param.length=l
  new_param.diam=d
  global length_inter
  length_inter +=l
  global age_inter
  age_inter=new_param.age
  produce Internode(new_param)
  
  if l>0.9*new_param.final_size:
    print new_param.age
  


Leaf(param):
  new_param=param.copy()
  new_param.age += pdt
  new_param.cumsum_temp+= delta_temperature_Leaf*pdt
  new_param.size = GrowthCurve(new_param.cumsum_temp,new_param.final_size,"Leaf")
  produce Leaf(new_param)  

interpretation:
maximum depth:2

Internode(param) --> F(param.length,param.diam) 

consider: Internode

Internode(paramI) < Leaf(paramL) :
  if paramL.position > 0.7 : petiole_length=1.5
  else : petiole_length=3
  produce @G ,(2) [ /(137.5) &(90) ,(1)  f(0) F(0.001,leafdiam(0)*leafwidth(min((paramL.age+1)/20.,1)))  ^(90)  &((1-paramI.pheno_advct)*pheno_angle[paramI.pheno_stage]+paramI.pheno_advct*pheno_angle[paramI.pheno_stage+1]) SetGuide(petioleCurve,(1-paramL.position)* paramL.size/4.)  Petiole((1-paramL.position)* paramL.size/4.,leafdiam(0)*leafwidth(min((paramL.age+1)/20.,1)))  ,(pheno_color[paramI.pheno_stage])   @Gc _(leafdiam(paramI.diam))  Sweep(axisfunc.getAt((paramI.pheno_stage+paramI.pheno_advct)/6.),leafsection, paramL.size, paramL.size/10., (paramL.size*0.24)*leafwidth(min((paramL.age+1)/20.,1)), leafdiam) ]  

Bud(burstdate,position) --> ,(7) @O(0.1)

Petiole(length,radius):
  for i in xrange(10):
    nproduce F(length/10.,radius)

Env --> @g(ScreenProjected(Translated(-0.5,-0.7,0,Text(str(current_date)))))

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_7 = pgl.Material("Color_7" , ambient = (62,125,20) , diffuse = 2.04 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (78,102,23) , diffuse = 1.50437 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_9 = pgl.Material("Color_9" , ambient = (70,113,21) , diffuse = 1.77218 , )
	Color_9.name = "Color_9"
	context.turtle.setMaterial(9,Color_9)
	Color_10 = pgl.Material("Color_10" , ambient = (95,79,27) , diffuse = 0.968421 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (121,46,33) , diffuse = 0.165289 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (60,60,15) , diffuse = 3 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (30,60,10) , diffuse = 1.68333 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_14 = pgl.Material("Color_14" , ambient = (55,60,14) , diffuse = 3 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	scalars = [('DAILY', 'Bool', True), ('NbOfDays', 'Integer', 297, 0, 1000)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] is "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	petioleCurve = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.543785, 0.192006, 1),(-0.178289, 0.176044, 1),(-0.0656355, 0.0728558, 1),(0.548469, 0.597983, 1),(0.397151, 0.581459, 1),(0.543571, 0.599108, 1)]) , 
	    )
	petioleCurve.name = "petioleCurve"
	import openalea.plantgl.all as pgl
	leafdiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0846264, 1),(0.239002, 1.00091, 1),(0.485529, 0.991241, 1),(0.718616, 1.00718, 1),(0.877539, 0.231273, 1),(1, 0.00332359, 1)]) , 
	    )
	leafdiam.name = "leafdiam"
	leaflength = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 1, 1),(0.00149779, 1.00072, 1),(1, 0.995671, 1),(1, 0.400121, 1)]) , 
	    )
	leaflength.name = "leaflength"
	leafwidth = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0, 1),(0.281668, -0.00351979, 1),(0.281668, 1.00209, 1),(1, 1, 1)]) , 
	    )
	leafwidth.name = "leafwidth"
	leafsection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.538256, 0.215235, 1),(-0.544272, 0.123918, 1),(-0.198373, -0.0924227, 1),(-0.00298323, 0.188761, 1),(0.0897461, -0.106293, 1),(0.536438, 0.0979703, 1),(0.515629, 0.163781, 1)]) , 
	    )
	leafsection.name = "leafsection"
	leafpath = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	leafpath.name = "leafpath"
	axis1 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.214286, 0.00865801, 1),(0.45671, 0.138528, 1)]) , 
	    )
	axis1.name = "axis1"
	axis2 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.209957, -0.017316, 1),(0.491342, -0.0952381, 1)]) , 
	    )
	axis2.name = "axis2"
	axis3 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, 0, 1),(0.5, 0, 1)]) , 
	    )
	axis3.name = "axis3"
	axis4 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.5, 0, 1),(-0.158009, -0.047619, 1),(0.166667, 0.004329, 1),(0.443723, -0.393939, 1)]) , 
	    )
	axis4.name = "axis4"
	axis5 = pgl.BezierCurve2D(	
	    pgl.Point3Array([(-0.416733, 0.0128104, 1),(0.2343, -0.076231, 1),(0.507411, -0.330906, 1),(0.662132, -0.814102, 1)]) , 
	    )
	axis5.name = "axis5"
	ang = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0, 1),(0.286308, 0.522427, 1),(0.630023, 1.16301, 1),(0.7981, 1.52128, 1),(0.908345, 0.885562, 1),(1, 0.51116, 1)]) , 
	    )
	ang.name = "ang"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Curve2D',petioleCurve),('Function',leafdiam),('Function',leaflength),('Function',leafwidth),('Curve2D',leafsection),('Curve2D',leafpath),('Curve2D',axis1),('Curve2D',axis2),('Curve2D',axis3),('Curve2D',axis4),('Curve2D',axis5),('Function',ang)])
	parameterset = [panel_0,]
	context["__functions__"] = [('leafdiam',leafdiam),('leaflength',leaflength),('leafwidth',leafwidth),('ang',ang),]
	context["__curves__"] = [('petioleCurve',petioleCurve),('leafsection',leafsection),('leafpath',leafpath),('axis1',axis1),('axis2',axis2),('axis3',axis3),('axis4',axis4),('axis5',axis5),]
	context["__parameterset__"] = parameterset
	context["petioleCurve"] = petioleCurve
	context["leafdiam"] = pgl.QuantisedFunction(leafdiam)
	context["leaflength"] = pgl.QuantisedFunction(leaflength)
	context["leafwidth"] = pgl.QuantisedFunction(leafwidth)
	context["leafsection"] = leafsection
	context["leafpath"] = leafpath
	context["axis1"] = axis1
	context["axis2"] = axis2
	context["axis3"] = axis3
	context["axis4"] = axis4
	context["axis5"] = axis5
	context["ang"] = pgl.QuantisedFunction(ang)
